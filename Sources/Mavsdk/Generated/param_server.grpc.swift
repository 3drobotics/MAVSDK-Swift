//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: param_server.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Provide raw access to retrieve and provide server parameters.
///
/// Usage: instantiate `Mavsdk_Rpc_ParamServer_ParamServerServiceClient`, then call methods of this protocol to make API calls.
internal protocol Mavsdk_Rpc_ParamServer_ParamServerServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Mavsdk_Rpc_ParamServer_ParamServerServiceClientInterceptorFactoryProtocol? { get }

  func retrieveParamInt(
    _ request: Mavsdk_Rpc_ParamServer_RetrieveParamIntRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_ParamServer_RetrieveParamIntRequest, Mavsdk_Rpc_ParamServer_RetrieveParamIntResponse>

  func provideParamInt(
    _ request: Mavsdk_Rpc_ParamServer_ProvideParamIntRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_ParamServer_ProvideParamIntRequest, Mavsdk_Rpc_ParamServer_ProvideParamIntResponse>

  func retrieveParamFloat(
    _ request: Mavsdk_Rpc_ParamServer_RetrieveParamFloatRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_ParamServer_RetrieveParamFloatRequest, Mavsdk_Rpc_ParamServer_RetrieveParamFloatResponse>

  func provideParamFloat(
    _ request: Mavsdk_Rpc_ParamServer_ProvideParamFloatRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_ParamServer_ProvideParamFloatRequest, Mavsdk_Rpc_ParamServer_ProvideParamFloatResponse>

  func retrieveAllParams(
    _ request: Mavsdk_Rpc_ParamServer_RetrieveAllParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_ParamServer_RetrieveAllParamsRequest, Mavsdk_Rpc_ParamServer_RetrieveAllParamsResponse>
}

extension Mavsdk_Rpc_ParamServer_ParamServerServiceClientProtocol {
  internal var serviceName: String {
    return "mavsdk.rpc.param_server.ParamServerService"
  }

  ///
  /// Retrieve an int parameter.
  ///
  /// If the type is wrong, the result will be `WRONG_TYPE`.
  ///
  /// - Parameters:
  ///   - request: Request to send to RetrieveParamInt.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func retrieveParamInt(
    _ request: Mavsdk_Rpc_ParamServer_RetrieveParamIntRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_ParamServer_RetrieveParamIntRequest, Mavsdk_Rpc_ParamServer_RetrieveParamIntResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.param_server.ParamServerService/RetrieveParamInt",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRetrieveParamIntInterceptors() ?? []
    )
  }

  ///
  /// Provide an int parameter.
  ///
  /// If the type is wrong, the result will be `WRONG_TYPE`.
  ///
  /// - Parameters:
  ///   - request: Request to send to ProvideParamInt.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func provideParamInt(
    _ request: Mavsdk_Rpc_ParamServer_ProvideParamIntRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_ParamServer_ProvideParamIntRequest, Mavsdk_Rpc_ParamServer_ProvideParamIntResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.param_server.ParamServerService/ProvideParamInt",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProvideParamIntInterceptors() ?? []
    )
  }

  ///
  /// Retrieve a float parameter.
  ///
  /// If the type is wrong, the result will be `WRONG_TYPE`.
  ///
  /// - Parameters:
  ///   - request: Request to send to RetrieveParamFloat.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func retrieveParamFloat(
    _ request: Mavsdk_Rpc_ParamServer_RetrieveParamFloatRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_ParamServer_RetrieveParamFloatRequest, Mavsdk_Rpc_ParamServer_RetrieveParamFloatResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.param_server.ParamServerService/RetrieveParamFloat",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRetrieveParamFloatInterceptors() ?? []
    )
  }

  ///
  /// Provide a float parameter.
  ///
  /// If the type is wrong, the result will be `WRONG_TYPE`.
  ///
  /// - Parameters:
  ///   - request: Request to send to ProvideParamFloat.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func provideParamFloat(
    _ request: Mavsdk_Rpc_ParamServer_ProvideParamFloatRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_ParamServer_ProvideParamFloatRequest, Mavsdk_Rpc_ParamServer_ProvideParamFloatResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.param_server.ParamServerService/ProvideParamFloat",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProvideParamFloatInterceptors() ?? []
    )
  }

  ///
  /// Retrieve all parameters.
  ///
  /// - Parameters:
  ///   - request: Request to send to RetrieveAllParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func retrieveAllParams(
    _ request: Mavsdk_Rpc_ParamServer_RetrieveAllParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_ParamServer_RetrieveAllParamsRequest, Mavsdk_Rpc_ParamServer_RetrieveAllParamsResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.param_server.ParamServerService/RetrieveAllParams",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRetrieveAllParamsInterceptors() ?? []
    )
  }
}

internal protocol Mavsdk_Rpc_ParamServer_ParamServerServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'retrieveParamInt'.
  func makeRetrieveParamIntInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_ParamServer_RetrieveParamIntRequest, Mavsdk_Rpc_ParamServer_RetrieveParamIntResponse>]

  /// - Returns: Interceptors to use when invoking 'provideParamInt'.
  func makeProvideParamIntInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_ParamServer_ProvideParamIntRequest, Mavsdk_Rpc_ParamServer_ProvideParamIntResponse>]

  /// - Returns: Interceptors to use when invoking 'retrieveParamFloat'.
  func makeRetrieveParamFloatInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_ParamServer_RetrieveParamFloatRequest, Mavsdk_Rpc_ParamServer_RetrieveParamFloatResponse>]

  /// - Returns: Interceptors to use when invoking 'provideParamFloat'.
  func makeProvideParamFloatInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_ParamServer_ProvideParamFloatRequest, Mavsdk_Rpc_ParamServer_ProvideParamFloatResponse>]

  /// - Returns: Interceptors to use when invoking 'retrieveAllParams'.
  func makeRetrieveAllParamsInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_ParamServer_RetrieveAllParamsRequest, Mavsdk_Rpc_ParamServer_RetrieveAllParamsResponse>]
}

internal final class Mavsdk_Rpc_ParamServer_ParamServerServiceClient: Mavsdk_Rpc_ParamServer_ParamServerServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Mavsdk_Rpc_ParamServer_ParamServerServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the mavsdk.rpc.param_server.ParamServerService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Mavsdk_Rpc_ParamServer_ParamServerServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Provide raw access to retrieve and provide server parameters.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Mavsdk_Rpc_ParamServer_ParamServerServiceProvider: CallHandlerProvider {
  var interceptors: Mavsdk_Rpc_ParamServer_ParamServerServiceServerInterceptorFactoryProtocol? { get }

  ///
  /// Retrieve an int parameter.
  ///
  /// If the type is wrong, the result will be `WRONG_TYPE`.
  func retrieveParamInt(request: Mavsdk_Rpc_ParamServer_RetrieveParamIntRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_ParamServer_RetrieveParamIntResponse>

  ///
  /// Provide an int parameter.
  ///
  /// If the type is wrong, the result will be `WRONG_TYPE`.
  func provideParamInt(request: Mavsdk_Rpc_ParamServer_ProvideParamIntRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_ParamServer_ProvideParamIntResponse>

  ///
  /// Retrieve a float parameter.
  ///
  /// If the type is wrong, the result will be `WRONG_TYPE`.
  func retrieveParamFloat(request: Mavsdk_Rpc_ParamServer_RetrieveParamFloatRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_ParamServer_RetrieveParamFloatResponse>

  ///
  /// Provide a float parameter.
  ///
  /// If the type is wrong, the result will be `WRONG_TYPE`.
  func provideParamFloat(request: Mavsdk_Rpc_ParamServer_ProvideParamFloatRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_ParamServer_ProvideParamFloatResponse>

  ///
  /// Retrieve all parameters.
  func retrieveAllParams(request: Mavsdk_Rpc_ParamServer_RetrieveAllParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_ParamServer_RetrieveAllParamsResponse>
}

extension Mavsdk_Rpc_ParamServer_ParamServerServiceProvider {
  internal var serviceName: Substring { return "mavsdk.rpc.param_server.ParamServerService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RetrieveParamInt":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_ParamServer_RetrieveParamIntRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_ParamServer_RetrieveParamIntResponse>(),
        interceptors: self.interceptors?.makeRetrieveParamIntInterceptors() ?? [],
        userFunction: self.retrieveParamInt(request:context:)
      )

    case "ProvideParamInt":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_ParamServer_ProvideParamIntRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_ParamServer_ProvideParamIntResponse>(),
        interceptors: self.interceptors?.makeProvideParamIntInterceptors() ?? [],
        userFunction: self.provideParamInt(request:context:)
      )

    case "RetrieveParamFloat":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_ParamServer_RetrieveParamFloatRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_ParamServer_RetrieveParamFloatResponse>(),
        interceptors: self.interceptors?.makeRetrieveParamFloatInterceptors() ?? [],
        userFunction: self.retrieveParamFloat(request:context:)
      )

    case "ProvideParamFloat":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_ParamServer_ProvideParamFloatRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_ParamServer_ProvideParamFloatResponse>(),
        interceptors: self.interceptors?.makeProvideParamFloatInterceptors() ?? [],
        userFunction: self.provideParamFloat(request:context:)
      )

    case "RetrieveAllParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_ParamServer_RetrieveAllParamsRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_ParamServer_RetrieveAllParamsResponse>(),
        interceptors: self.interceptors?.makeRetrieveAllParamsInterceptors() ?? [],
        userFunction: self.retrieveAllParams(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Mavsdk_Rpc_ParamServer_ParamServerServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'retrieveParamInt'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRetrieveParamIntInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_ParamServer_RetrieveParamIntRequest, Mavsdk_Rpc_ParamServer_RetrieveParamIntResponse>]

  /// - Returns: Interceptors to use when handling 'provideParamInt'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProvideParamIntInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_ParamServer_ProvideParamIntRequest, Mavsdk_Rpc_ParamServer_ProvideParamIntResponse>]

  /// - Returns: Interceptors to use when handling 'retrieveParamFloat'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRetrieveParamFloatInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_ParamServer_RetrieveParamFloatRequest, Mavsdk_Rpc_ParamServer_RetrieveParamFloatResponse>]

  /// - Returns: Interceptors to use when handling 'provideParamFloat'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProvideParamFloatInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_ParamServer_ProvideParamFloatRequest, Mavsdk_Rpc_ParamServer_ProvideParamFloatResponse>]

  /// - Returns: Interceptors to use when handling 'retrieveAllParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRetrieveAllParamsInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_ParamServer_RetrieveAllParamsRequest, Mavsdk_Rpc_ParamServer_RetrieveAllParamsResponse>]
}
