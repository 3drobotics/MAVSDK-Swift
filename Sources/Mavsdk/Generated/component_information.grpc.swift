//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: component_information.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Access component information such as parameters.
///
/// Usage: instantiate `Mavsdk_Rpc_ComponentInformation_ComponentInformationServiceClient`, then call methods of this protocol to make API calls.
internal protocol Mavsdk_Rpc_ComponentInformation_ComponentInformationServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Mavsdk_Rpc_ComponentInformation_ComponentInformationServiceClientInterceptorFactoryProtocol? { get }

  func accessFloatParams(
    _ request: Mavsdk_Rpc_ComponentInformation_AccessFloatParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_ComponentInformation_AccessFloatParamsRequest, Mavsdk_Rpc_ComponentInformation_AccessFloatParamsResponse>

  func subscribeFloatParam(
    _ request: Mavsdk_Rpc_ComponentInformation_SubscribeFloatParamRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_ComponentInformation_FloatParamResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_ComponentInformation_SubscribeFloatParamRequest, Mavsdk_Rpc_ComponentInformation_FloatParamResponse>
}

extension Mavsdk_Rpc_ComponentInformation_ComponentInformationServiceClientProtocol {
  internal var serviceName: String {
    return "mavsdk.rpc.component_information.ComponentInformationService"
  }

  ///
  /// List available float params.
  ///
  /// - Parameters:
  ///   - request: Request to send to AccessFloatParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func accessFloatParams(
    _ request: Mavsdk_Rpc_ComponentInformation_AccessFloatParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_ComponentInformation_AccessFloatParamsRequest, Mavsdk_Rpc_ComponentInformation_AccessFloatParamsResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.component_information.ComponentInformationService/AccessFloatParams",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccessFloatParamsInterceptors() ?? []
    )
  }

  ///
  /// Subscribe to float param changes/updates.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeFloatParam.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeFloatParam(
    _ request: Mavsdk_Rpc_ComponentInformation_SubscribeFloatParamRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_ComponentInformation_FloatParamResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_ComponentInformation_SubscribeFloatParamRequest, Mavsdk_Rpc_ComponentInformation_FloatParamResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.component_information.ComponentInformationService/SubscribeFloatParam",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeFloatParamInterceptors() ?? [],
      handler: handler
    )
  }
}

internal protocol Mavsdk_Rpc_ComponentInformation_ComponentInformationServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'accessFloatParams'.
  func makeAccessFloatParamsInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_ComponentInformation_AccessFloatParamsRequest, Mavsdk_Rpc_ComponentInformation_AccessFloatParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeFloatParam'.
  func makeSubscribeFloatParamInterceptors() -> [ClientInterceptor<Mavsdk_Rpc_ComponentInformation_SubscribeFloatParamRequest, Mavsdk_Rpc_ComponentInformation_FloatParamResponse>]
}

internal final class Mavsdk_Rpc_ComponentInformation_ComponentInformationServiceClient: Mavsdk_Rpc_ComponentInformation_ComponentInformationServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Mavsdk_Rpc_ComponentInformation_ComponentInformationServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the mavsdk.rpc.component_information.ComponentInformationService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Mavsdk_Rpc_ComponentInformation_ComponentInformationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Access component information such as parameters.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Mavsdk_Rpc_ComponentInformation_ComponentInformationServiceProvider: CallHandlerProvider {
  var interceptors: Mavsdk_Rpc_ComponentInformation_ComponentInformationServiceServerInterceptorFactoryProtocol? { get }

  ///
  /// List available float params.
  func accessFloatParams(request: Mavsdk_Rpc_ComponentInformation_AccessFloatParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_ComponentInformation_AccessFloatParamsResponse>

  ///
  /// Subscribe to float param changes/updates.
  func subscribeFloatParam(request: Mavsdk_Rpc_ComponentInformation_SubscribeFloatParamRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_ComponentInformation_FloatParamResponse>) -> EventLoopFuture<GRPCStatus>
}

extension Mavsdk_Rpc_ComponentInformation_ComponentInformationServiceProvider {
  internal var serviceName: Substring { return "mavsdk.rpc.component_information.ComponentInformationService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AccessFloatParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_ComponentInformation_AccessFloatParamsRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_ComponentInformation_AccessFloatParamsResponse>(),
        interceptors: self.interceptors?.makeAccessFloatParamsInterceptors() ?? [],
        userFunction: self.accessFloatParams(request:context:)
      )

    case "SubscribeFloatParam":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mavsdk_Rpc_ComponentInformation_SubscribeFloatParamRequest>(),
        responseSerializer: ProtobufSerializer<Mavsdk_Rpc_ComponentInformation_FloatParamResponse>(),
        interceptors: self.interceptors?.makeSubscribeFloatParamInterceptors() ?? [],
        userFunction: self.subscribeFloatParam(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Mavsdk_Rpc_ComponentInformation_ComponentInformationServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'accessFloatParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccessFloatParamsInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_ComponentInformation_AccessFloatParamsRequest, Mavsdk_Rpc_ComponentInformation_AccessFloatParamsResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeFloatParam'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeFloatParamInterceptors() -> [ServerInterceptor<Mavsdk_Rpc_ComponentInformation_SubscribeFloatParamRequest, Mavsdk_Rpc_ComponentInformation_FloatParamResponse>]
}
