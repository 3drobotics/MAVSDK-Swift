// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: component_information.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Meta information for parameter of type float.
struct Mavsdk_Rpc_ComponentInformation_FloatParam {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name (max 16 chars)
  var name: String = String()

  /// Short description
  var shortDescription: String = String()

  /// Long description
  var longDescription: String = String()

  /// Unit
  var unit: String = String()

  /// Decimal places for user to show
  var decimalPlaces: Int32 = 0

  /// Current/starting value
  var startValue: Float = 0

  /// Default value
  var defaultValue: Float = 0

  /// Minimum value
  var minValue: Float = 0

  /// Maximum value
  var maxValue: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_ComponentInformation_AccessFloatParamsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_ComponentInformation_AccessFloatParamsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var componentInformationResult: Mavsdk_Rpc_ComponentInformation_ComponentInformationResult {
    get {return _componentInformationResult ?? Mavsdk_Rpc_ComponentInformation_ComponentInformationResult()}
    set {_componentInformationResult = newValue}
  }
  /// Returns true if `componentInformationResult` has been explicitly set.
  var hasComponentInformationResult: Bool {return self._componentInformationResult != nil}
  /// Clears the value of `componentInformationResult`. Subsequent reads from it will return its default value.
  mutating func clearComponentInformationResult() {self._componentInformationResult = nil}

  /// Float param definitions
  var params: [Mavsdk_Rpc_ComponentInformation_FloatParam] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _componentInformationResult: Mavsdk_Rpc_ComponentInformation_ComponentInformationResult? = nil
}

/// A float param that has been updated.
struct Mavsdk_Rpc_ComponentInformation_FloatParamUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of param that changed
  var name: String = String()

  /// New value of param
  var value: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_ComponentInformation_SubscribeFloatParamRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_ComponentInformation_FloatParamResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A param update
  var paramUpdate: Mavsdk_Rpc_ComponentInformation_FloatParamUpdate {
    get {return _paramUpdate ?? Mavsdk_Rpc_ComponentInformation_FloatParamUpdate()}
    set {_paramUpdate = newValue}
  }
  /// Returns true if `paramUpdate` has been explicitly set.
  var hasParamUpdate: Bool {return self._paramUpdate != nil}
  /// Clears the value of `paramUpdate`. Subsequent reads from it will return its default value.
  mutating func clearParamUpdate() {self._paramUpdate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _paramUpdate: Mavsdk_Rpc_ComponentInformation_FloatParamUpdate? = nil
}

/// Result type.
struct Mavsdk_Rpc_ComponentInformation_ComponentInformationResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Result enum value
  var result: Mavsdk_Rpc_ComponentInformation_ComponentInformationResult.Result = .unknown

  /// Human-readable English string describing the result
  var resultStr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Possible results returned for param requests.
  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// Unknown result
    case unknown // = 0

    /// Request succeeded
    case success // = 1

    /// No system is connected
    case noSystem // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .success
      case 3: self = .noSystem
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .success: return 1
      case .noSystem: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Mavsdk_Rpc_ComponentInformation_ComponentInformationResult.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Mavsdk_Rpc_ComponentInformation_ComponentInformationResult.Result] = [
    .unknown,
    .success,
    .noSystem,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Mavsdk_Rpc_ComponentInformation_FloatParam: @unchecked Sendable {}
extension Mavsdk_Rpc_ComponentInformation_AccessFloatParamsRequest: @unchecked Sendable {}
extension Mavsdk_Rpc_ComponentInformation_AccessFloatParamsResponse: @unchecked Sendable {}
extension Mavsdk_Rpc_ComponentInformation_FloatParamUpdate: @unchecked Sendable {}
extension Mavsdk_Rpc_ComponentInformation_SubscribeFloatParamRequest: @unchecked Sendable {}
extension Mavsdk_Rpc_ComponentInformation_FloatParamResponse: @unchecked Sendable {}
extension Mavsdk_Rpc_ComponentInformation_ComponentInformationResult: @unchecked Sendable {}
extension Mavsdk_Rpc_ComponentInformation_ComponentInformationResult.Result: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "mavsdk.rpc.component_information"

extension Mavsdk_Rpc_ComponentInformation_FloatParam: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FloatParam"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "short_description"),
    3: .standard(proto: "long_description"),
    4: .same(proto: "unit"),
    5: .standard(proto: "decimal_places"),
    6: .standard(proto: "start_value"),
    7: .standard(proto: "default_value"),
    8: .standard(proto: "min_value"),
    9: .standard(proto: "max_value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.shortDescription) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.longDescription) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.unit) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.decimalPlaces) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self.startValue) }()
      case 7: try { try decoder.decodeSingularFloatField(value: &self.defaultValue) }()
      case 8: try { try decoder.decodeSingularFloatField(value: &self.minValue) }()
      case 9: try { try decoder.decodeSingularFloatField(value: &self.maxValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.shortDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.shortDescription, fieldNumber: 2)
    }
    if !self.longDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.longDescription, fieldNumber: 3)
    }
    if !self.unit.isEmpty {
      try visitor.visitSingularStringField(value: self.unit, fieldNumber: 4)
    }
    if self.decimalPlaces != 0 {
      try visitor.visitSingularInt32Field(value: self.decimalPlaces, fieldNumber: 5)
    }
    if self.startValue != 0 {
      try visitor.visitSingularFloatField(value: self.startValue, fieldNumber: 6)
    }
    if self.defaultValue != 0 {
      try visitor.visitSingularFloatField(value: self.defaultValue, fieldNumber: 7)
    }
    if self.minValue != 0 {
      try visitor.visitSingularFloatField(value: self.minValue, fieldNumber: 8)
    }
    if self.maxValue != 0 {
      try visitor.visitSingularFloatField(value: self.maxValue, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_ComponentInformation_FloatParam, rhs: Mavsdk_Rpc_ComponentInformation_FloatParam) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.shortDescription != rhs.shortDescription {return false}
    if lhs.longDescription != rhs.longDescription {return false}
    if lhs.unit != rhs.unit {return false}
    if lhs.decimalPlaces != rhs.decimalPlaces {return false}
    if lhs.startValue != rhs.startValue {return false}
    if lhs.defaultValue != rhs.defaultValue {return false}
    if lhs.minValue != rhs.minValue {return false}
    if lhs.maxValue != rhs.maxValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_ComponentInformation_AccessFloatParamsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccessFloatParamsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_ComponentInformation_AccessFloatParamsRequest, rhs: Mavsdk_Rpc_ComponentInformation_AccessFloatParamsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_ComponentInformation_AccessFloatParamsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccessFloatParamsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "component_information_result"),
    2: .same(proto: "params"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._componentInformationResult) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.params) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._componentInformationResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.params.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.params, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_ComponentInformation_AccessFloatParamsResponse, rhs: Mavsdk_Rpc_ComponentInformation_AccessFloatParamsResponse) -> Bool {
    if lhs._componentInformationResult != rhs._componentInformationResult {return false}
    if lhs.params != rhs.params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_ComponentInformation_FloatParamUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FloatParamUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.value != 0 {
      try visitor.visitSingularFloatField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_ComponentInformation_FloatParamUpdate, rhs: Mavsdk_Rpc_ComponentInformation_FloatParamUpdate) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_ComponentInformation_SubscribeFloatParamRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeFloatParamRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_ComponentInformation_SubscribeFloatParamRequest, rhs: Mavsdk_Rpc_ComponentInformation_SubscribeFloatParamRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_ComponentInformation_FloatParamResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FloatParamResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "param_update"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._paramUpdate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._paramUpdate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_ComponentInformation_FloatParamResponse, rhs: Mavsdk_Rpc_ComponentInformation_FloatParamResponse) -> Bool {
    if lhs._paramUpdate != rhs._paramUpdate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_ComponentInformation_ComponentInformationResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ComponentInformationResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "result_str"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.resultStr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unknown {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if !self.resultStr.isEmpty {
      try visitor.visitSingularStringField(value: self.resultStr, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_ComponentInformation_ComponentInformationResult, rhs: Mavsdk_Rpc_ComponentInformation_ComponentInformationResult) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.resultStr != rhs.resultStr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_ComponentInformation_ComponentInformationResult.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RESULT_UNKNOWN"),
    1: .same(proto: "RESULT_SUCCESS"),
    3: .same(proto: "RESULT_NO_SYSTEM"),
  ]
}
